---
const title = "AI Theme Color Playground";
const description = "Explore beautiful light and dark themes with custom color palettes";
import '../styles/theme.css';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="theme-container">
			<!-- Theme Toggle -->
			<div class="theme-toggle-section">
				<h1>{title}</h1>
				<p class="description">{description}</p>
				<div class="toggle-container">
					<button class="theme-toggle-btn" id="theme-toggle" type="button">
						<span class="theme-icon">🌙</span>
					</button>
				</div>
			</div>

			<!-- Color Palette Display -->
			<section class="color-palette-section">
				<h2>Color Palette</h2>
				<div class="color-grid">
					<div class="color-swatch bg-color" data-bg="bg">
						<span class="color-name">--bg</span>
						<span class="color-value">Background</span>
					</div>
					<div class="color-swatch bg-surface">
						<span class="color-name">--surface</span>
						<span class="color-value">Surface</span>
					</div>
					<div class="color-swatch bg-text">
						<span class="color-name">--text</span>
						<span class="color-value">Text</span>
					</div>
					<div class="color-swatch bg-primary">
						<span class="color-name">--primary</span>
						<span class="color-value">Primary</span>
					</div>
					<div class="color-swatch bg-secondary" data-color="secondary">
						<span class="color-name">--secondary</span>
						<span class="color-value">Secondary</span>
					</div>
					<div class="color-swatch bg-success" data-color="success">
						<span class="color-name">--success</span>
						<span class="color-value">Success</span>
					</div>
					<div class="color-swatch bg-danger" data-color="danger">
						<span class="color-name">--danger</span>
						<span class="color-value">Danger</span>
					</div>
					<div class="color-swatch bg-warning" data-color="warning">
						<span class="color-name">--warning</span>
						<span class="color-value">Warning</span>
					</div>
					<div class="color-swatch bg-info">
						<span class="color-name">--info</span>
						<span class="color-value">Info</span>
					</div>
					<div class="color-swatch bg-light">
						<span class="color-name">--light</span>
						<span class="color-value">Light</span>
					</div>
					<div class="color-swatch bg-dark">
						<span class="color-name">--dark</span>
						<span class="color-value">Dark</span>
					</div>
				</div>
			</section>

			<!-- Component Examples -->
			<section class="component-examples">
				<h2>Component Examples</h2>
				
				<div class="example-card interactive-buttons">
					<h3>Interactive Buttons</h3>
					<p>These buttons demonstrate the different color variants available in both themes.</p>
					
					<div class="button-group">
						<button class="btn btn-primary">Primary</button>
						<button class="btn btn-secondary" data-color="secondary">Secondary</button>
						<button class="btn btn-success" data-color="success">Success</button>
						<button class="btn btn-danger" data-color="danger">Danger</button>
						<button class="btn btn-warning" data-color="warning">Warning</button>
						<button class="btn btn-info" data-color="info">Info</button>
					</div>
				</div>

				<div class="typography-comparison">
					<!-- Background Color Typography -->
					<div class="example-card typography-bg">
						<h3>Typography on Background</h3>
						<p class="text-regular">Regular text using the main text color for body content.</p>
						<p class="text-primary">Primary colored text for important highlights and links.</p>
						<p class="text-secondary">Secondary colored text for subtle accents and labels.</p>
						<p class="text-success">Success messages for positive feedback and confirmations.</p>
						<p class="text-danger">Error or danger messages for warnings and critical alerts.</p>
						<p class="text-warning">Warning messages for cautionary information.</p>
						<p class="text-info">Informational messages for helpful tips and details.</p>
					</div>

					<!-- Surface Color Typography -->
					<div class="example-card typography-surface">
						<h3>Typography on Surface</h3>
						<p class="text-regular">Regular text using the main text color for body content.</p>
						<p class="text-primary">Primary colored text for important highlights and links.</p>
						<p class="text-secondary">Secondary colored text for subtle accents and labels.</p>
						<p class="text-success">Success messages for positive feedback and confirmations.</p>
						<p class="text-danger">Error or danger messages for warnings and critical alerts.</p>
						<p class="text-warning">Warning messages for cautionary information.</p>
						<p class="text-info">Informational messages for helpful tips and details.</p>
					</div>
				</div>

				<div class="forms-code-comparison">
					<!-- Form Elements -->
					<div class="example-card form-elements">
						<h3>Form Elements</h3>
						<p>Form inputs that adapt to the current theme automatically.</p>
						
						<div class="form-grid">
							<input type="text" placeholder="Enter your name" class="form-input">
							<select class="form-select">
								<option>Choose an option</option>
								<option>Light Theme</option>
								<option>Dark Theme</option>
								<option>Auto Theme</option>
							</select>
							<textarea placeholder="Enter your feedback" rows="4" class="form-textarea"></textarea>
							<button class="btn btn-primary">Submit Form</button>
						</div>
					</div>

					<!-- Code Block Demonstration -->
					<div class="example-card code-elements">
						<h3>Code Examples</h3>
						<p>Code blocks and inline code that adapt to the theme colors.</p>
						
						<div class="code-grid">
							<p>Here's some <code>inline code</code> that adapts to the theme.</p>
							
							<pre><code>{`// JavaScript example
const themeManager = {
  currentTheme: 'light',
  
  toggleTheme() {
    this.currentTheme = 
      this.currentTheme === 'light' 
        ? 'dark' 
        : 'light';
  }
};`}</code></pre>

							<pre><code>{`/* CSS Variables */
:root {
  --primary: #006564;
  --secondary: #FFC0CB;
  --bg: #FAFAFA;
}`}</code></pre>

							<p>Use <code>var(--primary)</code> for theme colors.</p>
						</div>
					</div>
				</div>
			</section>

			<!-- Instructions -->
			<section class="instructions-section">
				<h2>How to Use</h2>
				<p>Toggle between light and dark themes using the switch above, or press <kbd>Ctrl+T</kbd> for quick switching.</p>
				<p>Watch how all colors, components, and text automatically adapt to provide optimal contrast and readability.</p>
			</section>
		</div>
	</body>
</html>

<style>
	.theme-container {
		max-width: 800px;
		margin: 0 auto;
		padding: 1.5rem;
		background: var(--bg);
		color: var(--text);
		min-height: 100vh;
	}

	.theme-toggle-section {
		text-align: center;
		margin-bottom: 0.5rem;
	}

	.theme-toggle-section h1 {
		color: var(--primary);
		margin-bottom: 1rem;
		font-size: 2.5rem;
	}

	.description {
		font-size: 1.125rem;
		opacity: 0.8;
		margin-bottom: 1.5rem;
	}

	.toggle-container {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.theme-toggle-btn {
		position: relative;
		width: 60px;
		height: 60px;
		border-radius: 50%;
		border: 2px solid var(--primary);
		background: var(--surface);
		color: var(--text);
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
		transition: all 0.3s ease;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.theme-toggle-btn:hover {
		background: var(--primary);
		color: var(--bg);
		transform: scale(1.05);
	}

	.theme-toggle-btn:active {
		transform: scale(0.95);
	}

	.theme-icon {
		font-size: 1.5rem;
		transition: transform 0.3s ease;
	}

	.theme-toggle-btn:hover .theme-icon {
		transform: rotate(180deg);
	}

	.color-palette-section {
		margin-bottom: 3rem;
	}

	.color-palette-section h2 {
		color: var(--primary);
		margin-bottom: 1.5rem;
	}

	.color-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.color-swatch {
		height: 100px;
		border-radius: 0.5rem;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		text-align: center;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		transition: transform 0.2s ease;
	}

	.color-swatch:hover {
		transform: translateY(-2px);
	}

	.color-name {
		font-weight: 600;
		font-size: 0.875rem;
		margin-bottom: 0.25rem;
	}

	.color-value {
		font-size: 0.75rem;
		opacity: 0.8;
	}

	.component-examples {
		margin-bottom: 3rem;
	}

	.component-examples h2 {
		color: var(--primary);
		margin-bottom: 1.5rem;
	}

	.example-card:hover {
		border-color: var(--primary) !important;
		cursor: pointer;
	}

	.instructions-section {
		margin-bottom: 2rem;
	}

	.typography-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	.forms-code-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	/* Example Card Styles */
	.example-card {
		padding: 1.5rem;
		border-radius: 0.75rem;
		border: 2px solid transparent;
		transition: border-color 0.3s ease;
		margin-bottom: 1.5rem;
	}

	.example-card h3 {
		color: var(--primary);
		margin-bottom: 1rem;
	}

	.interactive-buttons {
		background: var(--surface);
		color: var(--text);
	}

	.typography-bg {
		background: var(--bg);
		color: var(--text);
		border-color: var(--surface);
	}

	.typography-surface {
		background: var(--surface);
		color: var(--text);
	}

	.form-elements {
		background: var(--surface);
		color: var(--text);
	}

	.code-elements {
		background: var(--surface);
		color: var(--text);
	}

	.code-grid {
		display: grid;
		gap: 1rem;
		margin-top: 1rem;
	}

	.code-grid code {
		background: var(--bg);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-family: 'Courier New', monospace;
		font-size: 0.9em;
		border: 1px solid var(--primary);
	}

	.code-grid pre {
		background: var(--bg);
		padding: 1rem;
		border-radius: 0.5rem;
		overflow-x: auto;
		border: 1px solid var(--primary);
		margin: 0.5rem 0;
	}

	.code-grid pre code {
		background: transparent;
		padding: 0;
		border: none;
		font-size: 0.85em;
		line-height: 1.4;
	}

	.instructions-section {
		background: var(--bg);
		color: var(--text);
		padding: 1.5rem;
		border: 2px solid var(--primary);
		border-radius: 0.75rem;
		text-align: center;
		margin-bottom: 2rem;
	}

	.instructions-section h2 {
		color: var(--primary);
		margin-bottom: 1rem;
	}

	.instructions-section kbd {
		background: var(--surface);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-family: monospace;
	}

	/* Button Group */
	.button-group {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		margin-top: 0.5rem;
	}

	/* Typography Classes */
	.text-regular {
		color: var(--text);
	}

	/* Form Elements */
	.form-grid {
		display: grid;
		gap: 1rem;
		max-width: 400px;
		margin-top: 1rem;
	}

	.form-input,
	.form-select,
	.form-textarea {
		padding: 0.5rem;
		border: 1px solid var(--surface);
		border-radius: 0.25rem;
		background: var(--bg);
		color: var(--text);
	}

	.form-textarea {
		resize: vertical;
	}

	/* Color Swatch Background Classes */
	.bg-color[data-bg="bg"] {
		background: var(--bg);
		color: var(--text);
		border: 1px solid var(--text);
	}

	.bg-surface {
		background: var(--surface);
		color: var(--text);
	}

	.bg-text {
		background: var(--text);
		color: var(--bg);
	}

	.bg-primary {
		background: var(--primary);
		color: var(--bg);
	}

	.bg-secondary {
		background: var(--secondary);
		color: var(--bg);
	}

	.bg-success {
		background: var(--success);
		color: var(--bg);
	}

	.bg-danger {
		background: var(--danger);
		color: var(--bg);
	}

	.bg-warning {
		background: var(--warning);
		color: var(--text);
	}

	.bg-info {
		background: var(--info);
		color: var(--bg);
	}

	.bg-light {
		background: var(--light);
		color: var(--text);
	}

	.bg-dark {
		background: var(--dark);
		color: var(--bg);
	}

	/* Dark theme specific color adjustments for better contrast */
	[data-theme="dark"] .color-swatch[data-color="secondary"],
	[data-theme="dark"] .btn-secondary {
		background: var(--secondary) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="success"],
	[data-theme="dark"] .btn-success {
		background: var(--success) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="warning"],
	[data-theme="dark"] .btn-warning {
		background: var(--warning) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="danger"],
	[data-theme="dark"] .btn-danger {
		background: var(--danger) !important;
		color: var(--bg) !important;
	}

	/* Button base styles */
	.btn-secondary,
	.btn-success,
	.btn-danger,
	.btn-warning,
	.btn-info {
		border: none;
		padding: 0.5rem 1rem;
		border-radius: 0.25rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	@media (max-width: 768px) {
		.theme-container {
			padding: 1rem;
		}

		.color-grid {
			grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
		}

		.toggle-container {
			flex-direction: column;
		}

		.theme-toggle-section h1 {
			font-size: 2rem;
		}

		.typography-comparison {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.forms-code-comparison {
			grid-template-columns: 1fr;
			gap: 1rem;
		}
	}
</style>

<script>
	// Theme toggle functionality - ensure DOM is loaded
	document.addEventListener('DOMContentLoaded', function() {
		const themeToggle = document.getElementById('theme-toggle');
		const themeIcon = document.querySelector('.theme-icon');
		const html = document.documentElement;

		// Check for saved theme preference or default to light mode
		const currentTheme = localStorage.getItem('theme') || 'light';
		
		console.log('Current theme:', currentTheme);
		console.log('Theme toggle element:', themeToggle);
		
		// Set initial theme and icon
		html.setAttribute('data-theme', currentTheme);
		html.classList.remove('theme-light', 'theme-dark');
		html.classList.add(`theme-${currentTheme}`);
		
		// Update icon based on current theme
		if (themeIcon) {
			themeIcon.textContent = currentTheme === 'dark' ? '☀️' : '🌙';
		}
		
		if (themeToggle) {
			// Toggle theme on button click
			themeToggle.addEventListener('click', function() {
				const newTheme = html.getAttribute('data-theme') === 'light' ? 'dark' : 'light';
				console.log('Switching to theme:', newTheme);
				html.setAttribute('data-theme', newTheme);
				html.classList.remove('theme-light', 'theme-dark');
				html.classList.add(`theme-${newTheme}`);
				localStorage.setItem('theme', newTheme);
				
				// Update icon
				if (themeIcon) {
					themeIcon.textContent = newTheme === 'dark' ? '☀️' : '🌙';
				}
			});
		}

		// Listen for keyboard shortcuts
		document.addEventListener('keydown', (e) => {
			if (e.ctrlKey && e.key.toLowerCase() === 't') {
				e.preventDefault();
				console.log('Keyboard shortcut triggered');
				if (themeToggle) {
					themeToggle.click();
				}
			}
		});

		// Listen for system theme changes
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
			if (!localStorage.getItem('theme')) {
				const systemTheme = e.matches ? 'dark' : 'light';
				html.setAttribute('data-theme', systemTheme);
				html.classList.remove('theme-light', 'theme-dark');
				html.classList.add(`theme-${systemTheme}`);
				if (themeIcon) {
					themeIcon.textContent = systemTheme === 'dark' ? '☀️' : '🌙';
				}
			}
		});
	});
</script>
