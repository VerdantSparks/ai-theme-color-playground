---
const title = "AI Theme Color Playground";
const description = "A playground to explore color system in both light and dark themes, using vanilla JavaScript and CSS. No framework except Astro were used.";
import '../styles/theme.css';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="theme-container">
			<!-- Theme Toggle -->
			<div class="theme-toggle-section">
				<h1>{title}</h1>
				<p class="description">{description}</p>
				<div class="toggle-container">
					<button class="theme-toggle-btn" id="theme-toggle" type="button">
						<span class="theme-icon">🌙</span>
					</button>
					<button class="download-config-btn" id="download-config" type="button" title="Download Theme Config">
						<span class="download-icon">📥</span>
					</button>
					<button class="upload-config-btn" id="upload-config" type="button" title="Upload Theme Config">
						<span class="upload-icon">📤</span>
					</button>
					<input type="file" id="file-input" accept=".json" style="display: none;">
				</div>
			</div>

			<!-- Color Picker Modal -->
			<div id="color-picker-modal" class="color-picker-modal">
				<div class="color-picker-overlay"></div>
				<div class="color-picker-content">
					<div class="color-picker-header">
						<h3 id="color-picker-title">Edit Color</h3>
						<button id="color-picker-close" class="color-picker-close">&times;</button>
					</div>
					<div class="color-picker-body">
						<div class="color-preview">
							<div class="color-preview-current" id="color-preview-current"></div>
							<div class="color-preview-new" id="color-preview-new"></div>
						</div>
						<div class="color-input-group">
							<label for="color-picker-input">Choose Color:</label>
							<input type="color" id="color-picker-input" class="color-picker-input">
							<input type="text" id="color-hex-input" class="color-hex-input" placeholder="#000000">
						</div>
						<div class="color-picker-actions">
							<button id="color-picker-apply" class="btn btn-primary">Apply</button>
							<button id="color-picker-reset" class="btn btn-secondary">Reset</button>
							<button id="color-picker-cancel" class="btn btn-light">Cancel</button>
						</div>
					</div>
				</div>
			</div>

			<!-- Color Palette Display -->
			<section class="color-palette-section">
				<h2>Color Palette</h2>
				<div class="color-grid">
					<div class="color-swatch bg-color" data-color="bg">
						<span class="color-name">Background</span>
						<span class="color-hex" data-color="bg"></span>
						<span class="color-rgb" data-color="bg"></span>
					</div>
					<div class="color-swatch bg-surface" data-color="surface">
						<span class="color-name">Surface</span>
						<span class="color-hex" data-color="surface"></span>
						<span class="color-rgb" data-color="surface"></span>
					</div>
					<div class="color-swatch bg-text" data-color="text">
						<span class="color-name">Text</span>
						<span class="color-hex" data-color="text"></span>
						<span class="color-rgb" data-color="text"></span>
					</div>
					<div class="color-swatch bg-primary" data-color="primary">
						<span class="color-name">Primary</span>
						<span class="color-hex" data-color="primary"></span>
						<span class="color-rgb" data-color="primary"></span>
					</div>
					<div class="color-swatch bg-secondary" data-color="secondary">
						<span class="color-name">Secondary</span>
						<span class="color-hex" data-color="secondary"></span>
						<span class="color-rgb" data-color="secondary"></span>
					</div>
					<div class="color-swatch bg-success" data-color="success">
						<span class="color-name">Success</span>
						<span class="color-hex" data-color="success"></span>
						<span class="color-rgb" data-color="success"></span>
					</div>
					<div class="color-swatch bg-danger" data-color="danger">
						<span class="color-name">Danger</span>
						<span class="color-hex" data-color="danger"></span>
						<span class="color-rgb" data-color="danger"></span>
					</div>
					<div class="color-swatch bg-warning" data-color="warning">
						<span class="color-name">Warning</span>
						<span class="color-hex" data-color="warning"></span>
						<span class="color-rgb" data-color="warning"></span>
					</div>
					<div class="color-swatch bg-info" data-color="info">
						<span class="color-name">Info</span>
						<span class="color-hex" data-color="info"></span>
						<span class="color-rgb" data-color="info"></span>
					</div>
					<div class="color-swatch bg-light" data-color="light">
						<span class="color-name">Light</span>
						<span class="color-hex" data-color="light"></span>
						<span class="color-rgb" data-color="light"></span>
					</div>
					<div class="color-swatch bg-dark" data-color="dark">
						<span class="color-name">Dark</span>
						<span class="color-hex" data-color="dark"></span>
						<span class="color-rgb" data-color="dark"></span>
					</div>
				</div>
			</section>

			<!-- Component Examples -->
			<section class="component-examples">
				<h2>Component Examples</h2>
				
				<div class="example-card interactive-buttons">
					<h3>Interactive Buttons</h3>
					<p>These buttons demonstrate the different color variants available in both themes.</p>
					
					<div class="button-group">
						<button class="btn btn-primary">Primary</button>
						<button class="btn btn-secondary" data-color="secondary">Secondary</button>
						<button class="btn btn-success" data-color="success">Success</button>
						<button class="btn btn-danger" data-color="danger">Danger</button>
						<button class="btn btn-warning" data-color="warning">Warning</button>
						<button class="btn btn-info" data-color="info">Info</button>
						<button class="btn btn-light" data-color="light">Light</button>
						<button class="btn btn-dark" data-color="dark">Dark</button>
					</div>
				</div>

				<div class="typography-comparison">
					<!-- Background Color Typography -->
					<div class="example-card typography-bg">
						<h3>Typography on Background</h3>
						<p class="text-regular">Regular text using the main text color for body content.</p>
						<p class="text-primary">Primary colored text for important highlights and links.</p>
						<p class="text-secondary">Secondary colored text for subtle accents and labels.</p>
						<p class="text-success">Success messages for positive feedback and confirmations.</p>
						<p class="text-danger">Error or danger messages for warnings and critical alerts.</p>
						<p class="text-warning">Warning messages for cautionary information.</p>
						<p class="text-info">Informational messages for helpful tips and details.</p>
					</div>

					<!-- Surface Color Typography -->
					<div class="example-card typography-surface">
						<h3>Typography on Surface</h3>
						<p class="text-regular">Regular text using the main text color for body content.</p>
						<p class="text-primary">Primary colored text for important highlights and links.</p>
						<p class="text-secondary">Secondary colored text for subtle accents and labels.</p>
						<p class="text-success">Success messages for positive feedback and confirmations.</p>
						<p class="text-danger">Error or danger messages for warnings and critical alerts.</p>
						<p class="text-warning">Warning messages for cautionary information.</p>
						<p class="text-info">Informational messages for helpful tips and details.</p>
					</div>
				</div>

				<div class="forms-code-comparison">
					<!-- Form Elements -->
					<div class="example-card form-elements">
						<h3>Form Elements</h3>
						<p>Form inputs that adapt to the current theme automatically.</p>
						
						<div class="form-grid">
							<input type="text" placeholder="Enter your name" class="form-input">
							<select class="form-select">
								<option>Choose an option</option>
								<option>Light Theme</option>
								<option>Dark Theme</option>
								<option>Auto Theme</option>
							</select>
							<textarea placeholder="Enter your feedback" rows="4" class="form-textarea"></textarea>
							<button class="btn btn-primary">Submit Form</button>
						</div>
					</div>

					<!-- Code Block Demonstration -->
					<div class="example-card code-elements">
						<h3>Code Examples</h3>
						<p>Code blocks and inline code that adapt to the theme colors.</p>
						
						<div class="code-grid">
							<p>Here's some <code>inline code</code> that adapts to the theme.</p>
							
							<pre><code>{`// JavaScript example
const themeManager = {
  currentTheme: 'light',
  
  toggleTheme() {
    this.currentTheme = 
      this.currentTheme === 'light' 
        ? 'dark' 
        : 'light';
  }
};`}</code></pre>

							<pre><code>{`/* CSS Variables */
:root {
  --primary: #006564;
  --secondary: #FFC0CB;
  --bg: #FAFAFA;
}`}</code></pre>

							<p>Use <code>var(--primary)</code> for theme colors.</p>
						</div>
					</div>
				</div>
			</section>

			<!-- Instructions -->
			<section class="instructions-section">
				<h2>How to Use</h2>
				<p>Toggle between light and dark themes using the switch above, or press <kbd>Ctrl+T</kbd> for quick switching.</p>
				<p>Click on any color swatch to open the color picker and customize colors in real time.</p>
				<p>Download your customized theme configuration using the download button (📥) or upload a theme configuration file using the upload button (📤).</p>
				<p>Watch how all colors, components, and text automatically adapt to provide optimal contrast and readability.</p>
			</section>
		</div>
	</body>
</html>

<style>
	.theme-container {
		max-width: 800px;
		margin: 0 auto;
		padding: 1.5rem;
		background: var(--bg);
		color: var(--text);
		min-height: 100vh;
	}

	.theme-toggle-section {
		text-align: center;
		margin-bottom: 0.5rem;
	}

	.theme-toggle-section h1 {
		color: var(--primary);
		margin-bottom: 1rem;
		font-size: 2.5rem;
	}

	.description {
		font-size: 1.125rem;
		opacity: 0.8;
		margin-bottom: 1.5rem;
	}

	.toggle-container {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.theme-toggle-btn {
		position: relative;
		width: 60px;
		height: 60px;
		border-radius: 50%;
		border: 2px solid var(--primary);
		background: transparent;
		color: var(--text);
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
		transition: all 0.3s ease;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.theme-toggle-btn:hover {
		background: var(--primary);
		color: white;
		transform: scale(1.05);
	}

	.theme-toggle-btn:active {
		transform: scale(0.95);
	}

	.theme-icon {
		font-size: 1.5rem;
		transition: transform 0.3s ease;
	}

	.theme-toggle-btn:hover .theme-icon {
		transform: rotate(180deg);
	}

	.download-config-btn {
		position: relative;
		width: 60px;
		height: 60px;
		border-radius: 50%;
		border: 2px solid var(--secondary);
		background: transparent;
		color: var(--text);
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
		transition: all 0.3s ease;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.download-config-btn:hover {
		background: var(--secondary);
		color: white;
		transform: scale(1.05);
	}

	.download-config-btn:active {
		transform: scale(0.95);
	}

	.download-icon {
		font-size: 1.5rem;
		transition: transform 0.3s ease;
	}

	.download-config-btn:hover .download-icon {
		transform: translateY(-2px);
	}

	.upload-config-btn {
		position: relative;
		width: 60px;
		height: 60px;
		border-radius: 50%;
		border: 2px solid var(--info);
		background: transparent;
		color: var(--text);
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
		transition: all 0.3s ease;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.upload-config-btn:hover {
		background: var(--info);
		color: white;
		transform: scale(1.05);
	}

	.upload-config-btn:active {
		transform: scale(0.95);
	}

	.upload-icon {
		font-size: 1.5rem;
		transition: transform 0.3s ease;
	}

	.upload-config-btn:hover .upload-icon {
		transform: translateY(-2px);
	}

	.color-palette-section {
		margin-bottom: 3rem;
	}

	.color-palette-section h2 {
		color: var(--primary);
		margin-bottom: 1.5rem;
	}

	.color-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.color-swatch {
		height: 120px;
		border-radius: 0.5rem;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		text-align: center;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		transition: transform 0.2s ease;
		padding: 0.5rem;
	}

	.color-swatch:hover {
		transform: translateY(-2px);
	}

	.color-name {
		font-weight: 600;
		font-size: 0.875rem;
		margin-bottom: 0.25rem;
	}

	.color-hex {
		font-size: 0.75rem;
		font-weight: 500;
		margin-bottom: 0.125rem;
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
	}

	.color-rgb {
		font-size: 0.7rem;
		opacity: 0.8;
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
	}

	.component-examples {
		margin-bottom: 3rem;
	}

	.component-examples h2 {
		color: var(--primary);
		margin-bottom: 1.5rem;
	}

	.example-card:hover {
		border-color: var(--primary) !important;
		cursor: pointer;
	}

	.instructions-section {
		margin-bottom: 2rem;
	}

	.typography-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	.forms-code-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	/* Example Card Styles */
	.example-card {
		padding: 1.5rem;
		border-radius: 0.75rem;
		border: 2px solid transparent;
		transition: border-color 0.3s ease;
		margin-bottom: 1.5rem;
	}

	.example-card h3 {
		color: var(--primary);
		margin-bottom: 1rem;
	}

	.interactive-buttons {
		background: var(--surface);
		color: var(--text);
	}

	.typography-bg {
		background: var(--bg);
		color: var(--text);
		border-color: var(--surface);
	}

	.typography-surface {
		background: var(--surface);
		color: var(--text);
	}

	.form-elements {
		background: var(--surface);
		color: var(--text);
	}

	.code-elements {
		background: var(--surface);
		color: var(--text);
	}

	.code-grid {
		display: grid;
		gap: 1rem;
		margin-top: 1rem;
	}

	.code-grid code {
		background: var(--bg);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-family: 'Courier New', monospace;
		font-size: 0.9em;
		border: 1px solid var(--primary);
	}

	.code-grid pre {
		background: var(--bg);
		padding: 1rem;
		border-radius: 0.5rem;
		overflow-x: auto;
		border: 1px solid var(--primary);
		margin: 0.5rem 0;
	}

	.code-grid pre code {
		background: transparent;
		padding: 0;
		border: none;
		font-size: 0.85em;
		line-height: 1.4;
	}

	.instructions-section {
		background: var(--bg);
		color: var(--text);
		padding: 1.5rem;
		border: 2px solid var(--primary);
		border-radius: 0.75rem;
		text-align: center;
		margin-bottom: 2rem;
	}

	.instructions-section h2 {
		color: var(--primary);
		margin-bottom: 1rem;
	}

	.instructions-section kbd {
		background: var(--surface);
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		font-family: monospace;
	}

	/* Button Group */
	.button-group {
		display: grid;
		grid-template-columns: repeat(8, 1fr);
		gap: 0.5rem;
		margin-top: 0.5rem;
	}

	.button-group .btn {
		min-width: 0;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	/* Responsive breakpoints for button grid */
	@media (max-width: 1024px) {
		.button-group {
			grid-template-columns: repeat(4, 1fr);
		}
	}

	@media (max-width: 600px) {
		.button-group {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	/* Typography Classes */
	.text-regular {
		color: var(--text);
	}

	/* Form Elements */
	.form-grid {
		display: grid;
		gap: 1rem;
		max-width: 400px;
		margin-top: 1rem;
	}

	.form-input,
	.form-select,
	.form-textarea {
		padding: 0.5rem;
		border: 1px solid var(--surface);
		border-radius: 0.25rem;
		background: var(--bg);
		color: var(--text);
	}

	.form-textarea {
		resize: vertical;
	}

	/* Color Swatch Background Classes */
	.bg-color[data-bg="bg"] {
		background: var(--bg);
		color: var(--text);
		border: 1px solid var(--text);
	}

	.bg-surface {
		background: var(--surface);
		color: var(--text);
	}

	.bg-text {
		background: var(--text);
		color: var(--bg);
	}

	.bg-primary {
		background: var(--primary);
		color: var(--bg);
	}

	.bg-secondary {
		background: var(--secondary);
		color: var(--bg);
	}

	.bg-success {
		background: var(--success);
		color: var(--bg);
	}

	.bg-danger {
		background: var(--danger);
		color: var(--bg);
	}

	.bg-warning {
		background: var(--warning);
		color: var(--text);
	}

	.bg-info {
		background: var(--info);
		color: var(--bg);
	}

	.bg-light {
		background: var(--light);
		color: var(--text);
	}

	.bg-dark {
		background: var(--dark);
		color: var(--bg);
	}

	/* Dark theme specific color adjustments for better contrast */
	[data-theme="dark"] .color-swatch[data-color="secondary"],
	[data-theme="dark"] .btn-secondary {
		background: var(--secondary) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="success"],
	[data-theme="dark"] .btn-success {
		background: var(--success) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="warning"],
	[data-theme="dark"] .btn-warning {
		background: var(--warning) !important;
		color: var(--bg) !important;
	}

	[data-theme="dark"] .color-swatch[data-color="danger"],
	[data-theme="dark"] .btn-danger {
		background: var(--danger) !important;
		color: var(--bg) !important;
	}

	/* Button base styles */
	.btn-secondary,
	.btn-success,
	.btn-danger,
	.btn-warning,
	.btn-info {
		border: none;
		padding: 0.5rem 1rem;
		border-radius: 0.25rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	/* Color Picker Modal */
	.color-picker-modal {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 2000;
		display: none;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.color-picker-modal.active {
		display: flex;
		opacity: 1;
		align-items: center;
		justify-content: center;
	}

	.color-picker-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		cursor: pointer;
	}

	.color-picker-content {
		position: relative;
		background: var(--surface);
		border-radius: 0.75rem;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
		max-width: 400px;
		width: 90%;
		max-height: 90vh;
		overflow-y: auto;
		z-index: 2001;
	}

	.color-picker-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem;
		border-bottom: 1px solid var(--light);
	}

	.color-picker-header h3 {
		margin: 0;
		color: var(--primary);
		font-size: 1.25rem;
	}

	.color-picker-close {
		background: none;
		border: none;
		font-size: 2rem;
		cursor: pointer;
		color: var(--text);
		width: 2rem;
		height: 2rem;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 50%;
		transition: background-color 0.2s ease;
	}

	.color-picker-close:hover {
		background: var(--light);
	}

	.color-picker-body {
		padding: 1.5rem;
	}

	.color-preview {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1.5rem;
	}

	.color-preview-current,
	.color-preview-new {
		flex: 1;
		height: 60px;
		border-radius: 0.5rem;
		border: 2px solid var(--light);
		position: relative;
		display: flex;
		align-items: end;
		justify-content: center;
		padding: 0.5rem;
		font-size: 0.75rem;
		color: white;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
	}

	.color-preview-current::after {
		content: 'Current';
		position: absolute;
		bottom: 0.25rem;
	}

	.color-preview-new::after {
		content: 'New';
		position: absolute;
		bottom: 0.25rem;
	}

	.color-input-group {
		margin-bottom: 1.5rem;
	}

	.color-input-group label {
		display: block;
		margin-bottom: 0.5rem;
		color: var(--text);
		font-weight: 600;
	}

	.color-picker-input {
		width: 100%;
		height: 50px;
		border: 2px solid var(--light);
		border-radius: 0.5rem;
		cursor: pointer;
		margin-bottom: 0.5rem;
	}

	.color-hex-input {
		width: 100%;
		padding: 0.75rem;
		border: 2px solid var(--light);
		border-radius: 0.5rem;
		background: var(--bg);
		color: var(--text);
		font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
		font-size: 1rem;
	}

	.color-hex-input:focus {
		outline: none;
		border-color: var(--primary);
		box-shadow: 0 0 0 2px rgba(0, 101, 100, 0.2);
	}

	.color-picker-actions {
		display: flex;
		gap: 0.75rem;
		justify-content: flex-end;
	}

	.color-picker-actions .btn {
		padding: 0.5rem 1rem;
		font-size: 0.875rem;
	}

	/* Make color swatches clickable */
	.color-swatch {
		cursor: pointer;
		position: relative;
	}

	.color-swatch::before {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: rgba(255, 255, 255, 0.9);
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 14px;
		opacity: 0;
		transition: opacity 0.2s ease;
		pointer-events: none;
		color: var(--text);
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
	}

	.color-swatch:hover::before {
		opacity: 1;
		content: '✎';
	}

	@media (max-width: 768px) {
		.theme-container {
			padding: 1rem;
		}

		.color-grid {
			grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
		}

		.toggle-container {
			flex-direction: column;
		}

		.download-config-btn,
		.theme-toggle-btn,
		.upload-config-btn {
			width: 50px;
			height: 50px;
			font-size: 1.25rem;
		}

		.theme-toggle-section h1 {
			font-size: 2rem;
		}

		.typography-comparison {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.forms-code-comparison {
			grid-template-columns: 1fr;
			gap: 1rem;
		}
	}
</style>

<script>
	// Theme toggle functionality - ensure DOM is loaded
	document.addEventListener('DOMContentLoaded', function() {
		const themeToggle = document.getElementById('theme-toggle');
		const themeIcon = document.querySelector('.theme-icon');
		const html = document.documentElement;

		// Initialize color values first
		const colorValues = {
			light: {
				bg: '#FAFAFA',
				surface: '#E4E4E4',
				text: '#4D4D4D',
				primary: '#006564',
				secondary: '#FFC0CB',
				success: '#00D9A8',
				danger: '#FF5C8A',
				warning: '#FFD700',
				info: '#2F6DB8',
				light: '#F7F7F7',
				dark: '#242424'
			},
			dark: {
				bg: '#242424',
				surface: '#4D4D4D',
				text: '#E4E4E4',
				primary: '#00D9A8',
				secondary: '#FFC0CB',
				success: '#006564',
				danger: '#FFA0BC',
				warning: '#FFD700',
				info: '#4DA3FF',
				light: '#606060',
				dark: '#000000'
			}
		};

		let originalColorValues = {
			light: { ...colorValues.light },
			dark: { ...colorValues.dark }
		};

		// Helper function to convert hex to RGB
		function hexToRgb(hex: string) {
			const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
			return result ? {
				r: parseInt(result[1], 16),
				g: parseInt(result[2], 16),
				b: parseInt(result[3], 16)
			} : null;
		}

		// Function to update color values in the palette
		function updateColorValues() {
			const currentTheme = html.getAttribute('data-theme') || 'light';
			const colors = (colorValues as any)[currentTheme];

			// Update each color swatch
			Object.keys(colors).forEach(colorName => {
				const hex = colors[colorName];
				const rgb = hexToRgb(hex);
				
				const hexElements = document.querySelectorAll(`[data-color="${colorName}"].color-hex`);
				const rgbElements = document.querySelectorAll(`[data-color="${colorName}"].color-rgb`);
				
				hexElements.forEach(el => el.textContent = hex);
				if (rgb) {
					rgbElements.forEach(el => el.textContent = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`);
				}
			});
		}

		function updateCSSVariables() {
			const currentTheme = html.getAttribute('data-theme') || 'light';
			const colors = (colorValues as any)[currentTheme];
			
			// Update CSS custom properties dynamically
			Object.keys(colors).forEach(colorName => {
				const colorValue = colors[colorName];
				document.documentElement.style.setProperty(`--${colorName}`, colorValue);
			});
		}

		// Check for saved theme preference or default to light mode
		const currentTheme = localStorage.getItem('theme') || 'light';
		
		console.log('Current theme:', currentTheme);
		console.log('Theme toggle element:', themeToggle);
		
		// Set initial theme and icon
		html.setAttribute('data-theme', currentTheme);
		html.classList.remove('theme-light', 'theme-dark');
		html.classList.add(`theme-${currentTheme}`);
		
		// Update icon based on current theme
		if (themeIcon) {
			themeIcon.textContent = currentTheme === 'dark' ? '☀️' : '🌙';
		}
		
		if (themeToggle) {
			// Toggle theme on button click
			themeToggle.addEventListener('click', function() {
				const newTheme = html.getAttribute('data-theme') === 'light' ? 'dark' : 'light';
				console.log('Switching to theme:', newTheme);
				html.setAttribute('data-theme', newTheme);
				html.classList.remove('theme-light', 'theme-dark');
				html.classList.add(`theme-${newTheme}`);
				localStorage.setItem('theme', newTheme);
				
				// Update icon
				if (themeIcon) {
					themeIcon.textContent = newTheme === 'dark' ? '☀️' : '🌙';
				}
				
				// Update color values
				updateColorValues();
				
				// Update CSS variables for any custom colors
				updateCSSVariables();
			});
		}

		// Listen for keyboard shortcuts
		document.addEventListener('keydown', (e) => {
			if (e.ctrlKey && e.key.toLowerCase() === 't') {
				e.preventDefault();
				console.log('Keyboard shortcut triggered');
				if (themeToggle) {
					themeToggle.click();
				}
			}
		});

		// Listen for system theme changes
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
			if (!localStorage.getItem('theme')) {
				const systemTheme = e.matches ? 'dark' : 'light';
				html.setAttribute('data-theme', systemTheme);
				html.classList.remove('theme-light', 'theme-dark');
				html.classList.add(`theme-${systemTheme}`);
				if (themeIcon) {
					themeIcon.textContent = systemTheme === 'dark' ? '☀️' : '🌙';
				}
				updateColorValues();
			}
		});

		// Color Picker functionality
		const colorPickerModal = document.getElementById('color-picker-modal');
		const colorPickerTitle = document.getElementById('color-picker-title');
		const colorPickerInput = document.getElementById('color-picker-input') as HTMLInputElement;
		const colorHexInput = document.getElementById('color-hex-input') as HTMLInputElement;
		const colorPreviewCurrent = document.getElementById('color-preview-current');
		const colorPreviewNew = document.getElementById('color-preview-new');
		const colorPickerClose = document.getElementById('color-picker-close');
		const colorPickerOverlay = document.querySelector('.color-picker-overlay');
		const applyButton = document.getElementById('color-picker-apply');
		const resetButton = document.getElementById('color-picker-reset');
		const cancelButton = document.getElementById('color-picker-cancel');
		const downloadConfigBtn = document.getElementById('download-config');
		const uploadConfigBtn = document.getElementById('upload-config');
		const fileInput = document.getElementById('file-input') as HTMLInputElement;

		let currentEditingColor: string = '';

		// Download configuration functionality
		function downloadThemeConfig() {
			const config = {
				name: "AI Theme Color Playground",
				version: "1.0.0",
				author: "Generated by AI Theme Color Playground",
				timestamp: new Date().toISOString(),
				themes: {
					light: { ...colorValues.light },
					dark: { ...colorValues.dark }
				},
				metadata: {
					currentTheme: html.getAttribute('data-theme') || 'light',
					totalColors: Object.keys(colorValues.light).length,
					customized: JSON.stringify(colorValues) !== JSON.stringify(originalColorValues)
				}
			};

			const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
			const url = URL.createObjectURL(blob);
			const a = document.createElement('a');
			a.href = url;
			a.download = `theme-config-${new Date().toISOString().split('T')[0]}.json`;
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
			URL.revokeObjectURL(url);
			
			console.log('Theme configuration downloaded');
		}

		if (downloadConfigBtn) {
			downloadConfigBtn.addEventListener('click', downloadThemeConfig);
		}

		// Upload configuration functionality
		function uploadThemeConfig() {
			if (fileInput) {
				fileInput.click();
			}
		}

		function handleFileUpload(event: Event) {
			const target = event.target as HTMLInputElement;
			const file = target.files?.[0];
			
			if (!file) return;

			const reader = new FileReader();
			reader.onload = function(e) {
				try {
					const content = e.target?.result as string;
					const config = JSON.parse(content);
					
					// Validate the config structure
					if (!config.themes || !config.themes.light || !config.themes.dark) {
						throw new Error('Invalid theme configuration file. Missing themes.light or themes.dark.');
					}

					// Update colorValues with the imported configuration
					Object.keys(config.themes.light).forEach(colorName => {
						if ((colorValues as any).light[colorName] !== undefined) {
							(colorValues as any).light[colorName] = config.themes.light[colorName];
						}
					});

					Object.keys(config.themes.dark).forEach(colorName => {
						if ((colorValues as any).dark[colorName] !== undefined) {
							(colorValues as any).dark[colorName] = config.themes.dark[colorName];
						}
					});

					// Apply the current theme with new colors
					updateCSSVariables();
					updateColorValues();

					// Show success message
					console.log('Theme configuration imported successfully');
					
					// Optional: Show a temporary success notification
					showNotification('Theme configuration imported successfully!', 'success');

				} catch (error) {
					console.error('Error importing theme configuration:', error);
					showNotification('Error importing theme configuration. Please check the file format.', 'error');
				}
			};
			
			reader.readAsText(file);
			
			// Clear the input so the same file can be selected again
			target.value = '';
		}

		function showNotification(message: string, type: 'success' | 'error') {
			// Create a simple notification element
			const notification = document.createElement('div');
			notification.textContent = message;
			notification.style.cssText = `
				position: fixed;
				top: 20px;
				right: 20px;
				padding: 1rem 1.5rem;
				border-radius: 0.5rem;
				color: white;
				font-weight: 600;
				z-index: 3000;
				max-width: 300px;
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
				background: ${type === 'success' ? 'var(--success)' : 'var(--danger)'};
				transform: translateX(100%);
				transition: transform 0.3s ease;
			`;
			
			document.body.appendChild(notification);
			
			// Animate in
			setTimeout(() => {
				notification.style.transform = 'translateX(0)';
			}, 100);
			
			// Remove after 3 seconds
			setTimeout(() => {
				notification.style.transform = 'translateX(100%)';
				setTimeout(() => {
					document.body.removeChild(notification);
				}, 300);
			}, 3000);
		}

		if (uploadConfigBtn) {
			uploadConfigBtn.addEventListener('click', uploadThemeConfig);
		}

		if (fileInput) {
			fileInput.addEventListener('change', handleFileUpload);
		}

		// Add click listeners to color swatches
		document.querySelectorAll('.color-swatch[data-color]').forEach(swatch => {
			swatch.addEventListener('click', (e) => {
				e.preventDefault();
				const colorName = swatch.getAttribute('data-color');
				if (colorName) {
					console.log('Opening color picker for:', colorName);
					openColorPicker(colorName);
				}
			});
		});

		function openColorPicker(colorName: string) {
			if (!colorPickerModal || !colorPickerTitle || !colorPickerInput || !colorHexInput || 
				!colorPreviewCurrent || !colorPreviewNew) {
				console.error('Color picker elements not found');
				return;
			}
				
			currentEditingColor = colorName;
			const currentTheme = html.getAttribute('data-theme') || 'light';
			const currentColor = (colorValues as any)[currentTheme][colorName];
			
			console.log('Opening color picker for:', colorName, 'Current color:', currentColor);
			
			// Update modal content
			colorPickerTitle.textContent = `Edit ${colorName.charAt(0).toUpperCase() + colorName.slice(1)} Color`;
			colorPickerInput.value = currentColor;
			colorHexInput.value = currentColor;
			colorPreviewCurrent.style.backgroundColor = currentColor;
			colorPreviewNew.style.backgroundColor = currentColor;
			
			// Show modal
			colorPickerModal.classList.add('active');
			document.body.style.overflow = 'hidden';
		}

		function closeColorPicker() {
			if (!colorPickerModal) return;
			colorPickerModal.classList.remove('active');
			document.body.style.overflow = '';
			currentEditingColor = '';
		}

		function updateColorPreview() {
			if (!colorPickerInput || !colorHexInput || !colorPreviewNew) return;
			const newColor = colorPickerInput.value;
			colorHexInput.value = newColor;
			colorPreviewNew.style.backgroundColor = newColor;
		}

		function updateColorFromHex() {
			if (!colorHexInput || !colorPickerInput || !colorPreviewNew) return;
			const hexValue = colorHexInput.value;
			if (/^#[0-9A-F]{6}$/i.test(hexValue)) {
				colorPickerInput.value = hexValue;
				colorPreviewNew.style.backgroundColor = hexValue;
			}
		}

		function applyColorChange() {
			if (!currentEditingColor || !colorPickerInput) return;
			
			const newColor = colorPickerInput.value;
			const currentTheme = html.getAttribute('data-theme') || 'light';
			
			console.log('Applying color change:', currentEditingColor, newColor);
			
			// Update color values
			(colorValues as any)[currentTheme][currentEditingColor] = newColor;
			
			// Update CSS custom properties
			updateCSSVariables();
			
			// Update color value displays
			updateColorValues();
			
			// Close modal
			closeColorPicker();
		}

		function resetColorToOriginal() {
			if (!currentEditingColor) return;
			
			const currentTheme = html.getAttribute('data-theme') || 'light';
			const originalColor = (originalColorValues as any)[currentTheme][currentEditingColor];
			
			// Update color values back to original
			(colorValues as any)[currentTheme][currentEditingColor] = originalColor;
			
			// Update CSS custom properties
			updateCSSVariables();
			
			// Update color value displays
			updateColorValues();
			
			// Close modal
			closeColorPicker();
		}

		// Event listeners for color picker
		if (colorPickerInput) {
			colorPickerInput.addEventListener('input', updateColorPreview);
			console.log('Color picker input listener added');
		}
		if (colorHexInput) colorHexInput.addEventListener('input', updateColorFromHex);
		if (colorPickerClose) colorPickerClose.addEventListener('click', closeColorPicker);
		if (colorPickerOverlay) colorPickerOverlay.addEventListener('click', closeColorPicker);
		if (applyButton) applyButton.addEventListener('click', applyColorChange);
		if (resetButton) resetButton.addEventListener('click', resetColorToOriginal);
		if (cancelButton) cancelButton.addEventListener('click', closeColorPicker);

		// Close modal with Escape key
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && colorPickerModal && colorPickerModal.classList.contains('active')) {
				closeColorPicker();
			}
		});

		// Initial color values update
		updateColorValues();
		
		console.log('Color picker setup complete');
	});
</script>
