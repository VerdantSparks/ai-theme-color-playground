---
const title = "AI Theme Color Playground";
import '../styles/theme.css';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<main style="padding: 2rem; max-width: 1200px; margin: 0 auto;">
			<header style="text-align: center; margin-bottom: 3rem;">
				<h1 style="margin-bottom: 0.5rem; font-size: 2.5rem;">{title}</h1>
				<p style="font-size: 1.125rem; opacity: 0.8;">Explore beautiful light and dark themes with custom color palettes</p>
			</header>

			<section style="margin-bottom: 3rem;">
				<h2>Theme Demo</h2>
				<p>Click the theme toggle button in the top-right corner to switch between light and dark modes, or use <kbd>Ctrl+T</kbd>.</p>
			</section>

			<section style="margin-bottom: 3rem;">
				<h2>Color Palette</h2>
				<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-primary">Primary</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--primary); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--primary)</code>
						</div>
					</div>
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-secondary">Secondary</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--secondary); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--secondary)</code>
						</div>
					</div>
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-success">Success</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--success); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--success)</code>
						</div>
					</div>
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-danger">Danger</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--danger); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--danger)</code>
						</div>
					</div>
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-warning">Warning</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--warning); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--warning)</code>
						</div>
					</div>
					<div class="card">
						<div class="card-header">
							<h3 class="card-title text-info">Info</h3>
						</div>
						<div class="card-body">
							<div style="width: 100%; height: 60px; background-color: var(--info); border-radius: 0.25rem; margin-bottom: 0.5rem;"></div>
							<code>var(--info)</code>
						</div>
					</div>
				</div>
			</section>

			<section style="margin-bottom: 3rem;">
				<h2>Components</h2>
				<div style="display: grid; gap: 2rem;">
					<div>
						<h3>Buttons</h3>
						<div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
							<button class="btn btn-primary">Primary</button>
							<button class="btn btn-secondary">Secondary</button>
							<button class="btn btn-success">Success</button>
							<button class="btn btn-danger">Danger</button>
							<button class="btn btn-warning">Warning</button>
							<button class="btn btn-info">Info</button>
							<button class="btn btn-light">Light</button>
							<button class="btn btn-dark">Dark</button>
						</div>
					</div>

					<div>
						<h3>Alerts</h3>
						<div class="alert alert-primary">
							<strong>Primary Alert:</strong> This is a primary alert with some example text.
						</div>
						<div class="alert alert-success">
							<strong>Success Alert:</strong> This is a success alert indicating a successful action.
						</div>
						<div class="alert alert-danger">
							<strong>Danger Alert:</strong> This is a danger alert indicating an error or warning.
						</div>
						<div class="alert alert-warning">
							<strong>Warning Alert:</strong> This is a warning alert with important information.
						</div>
						<div class="alert alert-info">
							<strong>Info Alert:</strong> This is an info alert with additional information.
						</div>
					</div>

					<div>
						<h3>Cards</h3>
						<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
							<div class="card">
								<div class="card-header">
									<h4 class="card-title">Card Title</h4>
								</div>
								<div class="card-body">
									<p>This is a card component with some content. The card adapts to the current theme automatically.</p>
									<button class="btn btn-primary">Action</button>
								</div>
							</div>
							<div class="card">
								<div class="card-header">
									<h4 class="card-title">Another Card</h4>
								</div>
								<div class="card-body">
									<p>Cards provide a flexible container for content with consistent styling across themes.</p>
									<button class="btn btn-secondary">Learn More</button>
								</div>
							</div>
						</div>
					</div>

					<div>
						<h3>Form Elements</h3>
						<div style="display: grid; gap: 1rem; max-width: 400px;">
							<input type="text" placeholder="Enter your name" />
							<select>
								<option>Choose an option</option>
								<option>Option 1</option>
								<option>Option 2</option>
							</select>
							<textarea placeholder="Enter your message" rows="4"></textarea>
							<button class="btn btn-primary">Submit</button>
						</div>
					</div>
				</div>
			</section>

			<section style="margin-bottom: 3rem;">
				<h2>Typography</h2>
				<h1>Heading 1</h1>
				<h2>Heading 2</h2>
				<h3>Heading 3</h3>
				<h4>Heading 4</h4>
				<h5>Heading 5</h5>
				<h6>Heading 6</h6>
				<p>This is a paragraph of text to demonstrate how typography looks in both light and dark themes. The text color automatically adjusts based on the selected theme.</p>
				<p>You can also use <a href="#">links</a> and <code>inline code</code> elements.</p>
				<pre><code>// Code block example
const themeValue = 'awesome';
console.log('This theme is ' + themeValue + '!');</code></pre>
			</section>
		</main>

		<script is:inline>
			// Theme management functionality
			class ThemeManager {
				constructor() {
					this.currentTheme = this.getStoredTheme() || this.getSystemTheme();
					this.init();
				}

				init() {
					console.log('ThemeManager initializing with theme:', this.currentTheme);
					this.applyTheme(this.currentTheme);
					this.createThemeToggle();
					this.bindEvents();
					console.log('ThemeManager initialization complete');
				}

				getSystemTheme() {
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				}

				getStoredTheme() {
					return localStorage.getItem('theme');
				}

				setStoredTheme(theme) {
					localStorage.setItem('theme', theme);
				}

				applyTheme(theme) {
					// Remove existing theme classes
					document.documentElement.classList.remove('theme-light', 'theme-dark');
					// Add the new theme class
					document.documentElement.classList.add(`theme-${theme}`);
					this.currentTheme = theme;
					this.setStoredTheme(theme);
					this.updateToggleButton();
					
					// Debug logging
					console.log(`Applied theme: ${theme}`, document.documentElement.className);
				}

				toggleTheme() {
					const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
					console.log(`Toggling from ${this.currentTheme} to ${newTheme}`);
					this.applyTheme(newTheme);
				}

				createThemeToggle() {
					const toggle = document.createElement('button');
					toggle.className = 'theme-toggle';
					toggle.setAttribute('aria-label', 'Toggle theme');
					toggle.setAttribute('title', 'Toggle between light and dark theme');
					toggle.innerHTML = this.getToggleIcon();
					
					document.body.appendChild(toggle);
					this.toggleButton = toggle;
					console.log('Theme toggle button created and added to DOM');
				}

				getToggleIcon() {
					return this.currentTheme === 'light' ? '🌙' : '☀️';
				}

				updateToggleButton() {
					if (this.toggleButton) {
						this.toggleButton.innerHTML = this.getToggleIcon();
						this.toggleButton.setAttribute('title', 
							`Switch to ${this.currentTheme === 'light' ? 'dark' : 'light'} theme`
						);
					}
				}

				bindEvents() {
					// Listen for toggle button clicks
					if (this.toggleButton) {
						this.toggleButton.addEventListener('click', (e) => {
							console.log('Theme toggle clicked');
							e.preventDefault();
							this.toggleTheme();
						});
					} else {
						console.error('Theme toggle button not found');
					}

					// Listen for system theme changes
					window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
						if (!this.getStoredTheme()) {
							this.applyTheme(e.matches ? 'dark' : 'light');
						}
					});

					// Listen for keyboard shortcuts
					document.addEventListener('keydown', (e) => {
						if (e.ctrlKey && e.key === 'T') {
							e.preventDefault();
							console.log('Keyboard shortcut triggered');
							this.toggleTheme();
						}
					});
				}
			}

			// Initialize theme manager when DOM is loaded
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => {
					console.log('DOM loaded, initializing theme manager');
					window.themeManager = new ThemeManager();
				});
			} else {
				console.log('DOM already loaded, initializing theme manager');
				window.themeManager = new ThemeManager();
			}

			// Export for use in other modules
			window.ThemeManager = ThemeManager;
		</script>
	</body>
</html>
